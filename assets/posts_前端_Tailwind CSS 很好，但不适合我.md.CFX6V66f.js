import{_ as e,o as t,c as a,a4 as i}from"./chunks/framework.CPfoFgza.js";const m=JSON.parse('{"title":"Tailwind CSS 很好，但不适合我","description":"","frontmatter":{"title":"Tailwind CSS 很好，但不适合我","date":"2023-10-02T00:00:00.000Z","abstract":"在一个月前，我选择了 Tailwind CSS 用于一个企业官网的开发。一个月后，项目经过了几次小版本迭代，我对 Tailwind CSS 的使用小有心得。本文将阐述我在企业开发中使用 Tailwind CSS 后对它的看法。","tags":["CSS"]},"headers":[],"relativePath":"posts/前端/Tailwind CSS 很好，但不适合我.md","filePath":"posts/前端/Tailwind CSS 很好，但不适合我.md","lastUpdated":1714907733000}'),r={name:"posts/前端/Tailwind CSS 很好，但不适合我.md"},d=i('<h1 id="tailwind-css-很好-但不适合我" tabindex="-1">Tailwind CSS 很好，但不适合我 <a class="header-anchor" href="#tailwind-css-很好-但不适合我" aria-label="Permalink to &quot;Tailwind CSS 很好，但不适合我&quot;">​</a></h1><p>在一个月前，我选择了 Tailwind CSS 用于一个企业官网的开发。一个月后，项目经过了几次小版本迭代，我对 Tailwind CSS 的使用小有心得。本文将阐述我在企业开发中使用 Tailwind CSS 后对它的看法。</p><h2 id="什么是-tailwind-css" tabindex="-1">什么是 Tailwind CSS？ <a class="header-anchor" href="#什么是-tailwind-css" aria-label="Permalink to &quot;什么是 Tailwind CSS？&quot;">​</a></h2><p>Tailwind CSS 是一个高度可定制的 CSS 框架，它旨在帮助开发人员快速构建现代化、响应式的网页界面。与其他框架如 Bootstrap 不同，Tailwind CSS 不依赖于预定义的样式类，而是提供一组原子级的样式类，开发人员可以根据需要自由组合这些类来构建页面。</p><p>Tailwind CSS 的核心概念是原子级类，每个类都对应一个具体的样式属性或操作，例如字体大小、颜色、边距、宽度等。通过组合这些类，可以快速地定义所需的样式，并实现样式的可复用性和可定制性。</p><p>使用 Tailwind CSS，开发人员可以避免编写大量重复的 CSS 代码，而是直接使用预定义的类进行构建，从而提高开发效率。同时，由于每个类只负责一个具体的样式属性，因此更容易理解和维护。</p><p>Tailwind CSS 还提供了一套强大的工具和插件，用于辅助开发过程，例如响应式布局、动画效果、自定义主题等。它还支持通过配置文件进行项目定制，开发人员可以根据项目需求选择性地启用或禁用某些特性。</p><p>总之，Tailwind CSS 是一个灵活、高效、可扩展的 CSS 框架，旨在帮助开发人员快速构建现代化的网页界面。</p><h2 id="使用前我希望-tailwind-css-带来什么" tabindex="-1">使用前我希望 Tailwind CSS 带来什么？ <a class="header-anchor" href="#使用前我希望-tailwind-css-带来什么" aria-label="Permalink to &quot;使用前我希望 Tailwind CSS 带来什么？&quot;">​</a></h2><ol><li>不再为 CSS 命名而烦恼。</li><li>更快更简单地实现样式。</li><li>项目整体样式风格保持一致。</li></ol><h2 id="tailwind-css-实际带来了什么" tabindex="-1">Tailwind CSS 实际带来了什么？ <a class="header-anchor" href="#tailwind-css-实际带来了什么" aria-label="Permalink to &quot;Tailwind CSS 实际带来了什么？&quot;">​</a></h2><h3 id="命名更简单了" tabindex="-1">命名更简单了 <a class="header-anchor" href="#命名更简单了" aria-label="Permalink to &quot;命名更简单了&quot;">​</a></h3><p>使用 Tailwind CSS 后，开发人员可以避免为 CSS 类命名而烦恼的情况，因为它采用了一种基于原子级类的设计思想。这意味着每个类只负责一个具体的样式属性或操作，例如 <code>text-red-500</code> 表示文本颜色为红色，并且颜色值为 500。</p><p>由于每个类都是原子级别的，不需要为每个元素编写自定义的类名，而是直接通过将各种类组合在一起来构建所需的样式。这种方式具有高度的可复用性和可维护性，使开发人员可以更快地编写样式。</p><h3 id="更快地实现样式-未必" tabindex="-1">更快地实现样式？未必 <a class="header-anchor" href="#更快地实现样式-未必" aria-label="Permalink to &quot;更快地实现样式？未必&quot;">​</a></h3><p>这点要分情况讨论，对于没有 UI 设计师的团队来说，Tailwind CSS 在提供了基础方案的同时又提供了简便的自定义方案的能力，即便没有设计师，开发者可以很简单地写出有“及格分”的页面。</p><p>对于有 UI 设计师的团队来说，往往会使用<code>蓝湖</code>与 <code>Figma</code> 这样的工具，设计图本身拥有显示 CSS 代码的能力，通常复制代码后只需要小小修改即可使用，使用 Tailwind CSS 来手写反而降低了效率。</p><h3 id="项目样式风格保持一致-同样未必" tabindex="-1">项目样式风格保持一致？同样未必 <a class="header-anchor" href="#项目样式风格保持一致-同样未必" aria-label="Permalink to &quot;项目样式风格保持一致？同样未必&quot;">​</a></h3><p>项目的样式细节划分为一系列原子类，例如颜色、尺寸、间距、字体样式等。理论上使用原子类后，页面的样式风格会更统一。然而，前端开发者可能面临的一个窘境是设计图本身并没有统一。<strong>一些设计过于注重细节而忽视了整体上的统一</strong>，在遵循语义化规则时可能被忽视，一旦使用原子类问题就显而易见。</p><p>以字号为例，理想状态是字号大小使用固定的方案，例如：</p><table><thead><tr><th>类名</th><th>属性</th></tr></thead><tbody><tr><td>text-xs</td><td>font-size: 0.75rem; /_ 12px <em>/ line-height: 1rem; /</em> 16px _/</td></tr><tr><td>text-sm</td><td>font-size: 0.875rem; /_ 14px <em>/ line-height: 1.25rem; /</em> 20px _/</td></tr><tr><td>text-base</td><td>font-size: 1rem; /_ 16px <em>/ line-height: 1.5rem; /</em> 24px _/</td></tr><tr><td>text-lg</td><td>font-size: 1.125rem; /_ 18px <em>/ line-height: 1.75rem; /</em> 28px _/</td></tr><tr><td>text-xl</td><td>font-size: 1.25rem; /_ 20px <em>/ line-height: 1.75rem; /</em> 28px _/</td></tr><tr><td>text-2xl</td><td>font-size: 1.5rem; /_ 24px <em>/ line-height: 2rem; /</em> 32px _/</td></tr><tr><td>text-3xl</td><td>font-size: 1.875rem; /_ 30px <em>/ line-height: 2.25rem; /</em> 36px _/</td></tr><tr><td>text-4xl</td><td>font-size: 2.25rem; /_ 36px <em>/ line-height: 2.5rem; /</em> 40px _/</td></tr><tr><td>text-5xl</td><td>font-size: 3rem; /_ 48px _/ line-height: 1;</td></tr><tr><td>text-6xl</td><td>font-size: 3.75rem; /_ 60px _/ line-height: 1;</td></tr><tr><td>text-7xl</td><td>font-size: 4.5rem; /_ 72px _/ line-height: 1;</td></tr><tr><td>text-8xl</td><td>font-size: 6rem; /_ 96px _/ line-height: 1;</td></tr><tr><td>text-9xl</td><td>font-size: 8rem; /_ 128px _/ line-height: 1;</td></tr></tbody></table><p>然而，实际情况是也许设计师本身并不清楚项目字号究竟有多少种，可能存在 22、26、28，也可能存在 32、34，甚至奇数大小的字号也会存在。而 <code>line-height</code>的数值更是随心所欲，原因可能仅仅是因为在这个地方看起来好看。</p><p>碰到这样的问题，开发者又陷入了新的命名困难中。心想干脆摆烂所有地方使用<code>text-[14px]</code>这样的任意值，但这又失去了希望风格统一、便于管理的初衷。</p><h2 id="更简单的响应式设计" tabindex="-1">更简单的响应式设计 <a class="header-anchor" href="#更简单的响应式设计" aria-label="Permalink to &quot;更简单的响应式设计&quot;">​</a></h2><p>之所以单独拿出来讲这点，是因为这是我在选型时未考虑到的。但是在改版变成响应式设计中觉得很便利的一点，例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> grid grid-cols-1 md:grid-cols-2 gap-x-3 gap-y-4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>很简单地创建了一个网格布局，如果使用媒体查询，代码量会多很多。</p><h2 id="它很好-但不适合我。" tabindex="-1">它很好，但不适合我。 <a class="header-anchor" href="#它很好-但不适合我。" aria-label="Permalink to &quot;它很好，但不适合我。&quot;">​</a></h2><p>引用知乎上<code>《为什么国内类似 Tailwind CSS 这样的方案没有流行起来？》</code>回答下的一一段话。</p><blockquote><p>主要看<a href="https://www.zhihu.com/search?q=%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2971232012%7D" target="_blank" rel="noreferrer">前端开发</a>工作在进行复用和组合时的<a href="https://www.zhihu.com/search?q=%E9%A2%97%E7%B2%92%E5%BA%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2971232012%7D" target="_blank" rel="noreferrer">颗粒度</a>大小。Tailwind 是一个很具体的颗粒度，如果一个项目所需的颗粒度比它大或比它小，用起来的体验都不是最优的。</p><p>对于老一点、成熟一点的公司来说，早就有自己的设计体系和对应的<a href="https://www.zhihu.com/search?q=%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2971232012%7D" target="_blank" rel="noreferrer">前端组件</a>库了，复用和组合的颗粒是组件。例如说，我们全公司都规定了按钮长这个样子、两个水平并排的按钮间隔这么多、移动版两个垂直堆叠的按钮之间间隔这么多，那还有 Tailwind 什么事情？</p><p>……</p><p>Tailwind 适合的是新生代的公司，还没有自己的设计体系，要从零开始做一套自己的。这时候 Tailwind 的优势就出来了：你还没有自己的组件对吧？那你要用更小颗粒度的东西先搭出来通用组件吧？这个更小颗粒度的东西到底是什么呢？就是 HTML 元素和 CSS 样式了。</p><p>作者：Cat Chen 链接：<a href="https://www.zhihu.com/question/506073568/answer/2971232012" target="_blank" rel="noreferrer">https://www.zhihu.com/question/506073568/answer/2971232012</a> 来源：知乎</p></blockquote><p>对于成熟公司来说，早有自己的开发体系与组件库，不可能也没必要用 Tailwind CSS 重新来过；而对于中小公司来说，过于注重局部而忽视整体的设计，使用原子类是对开发者的折磨。毕竟，<strong>前端开发本身缺少话语权，照着设计图来做就完事了</strong>。</p><p>总而言之，设计规范越明确，Tailwind CSS 用起来越顺手。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ol><li><a href="https://www.zhihu.com/question/337939566" target="_blank" rel="noreferrer">如何评价 CSS 框架 TailwindCSS？ - 知乎 (zhihu.com)</a></li></ol>',34),n=[d];function l(s,o,h,p,c,S){return t(),a("div",null,n)}const w=e(r,[["render",l]]);export{m as __pageData,w as default};
