import{d as l,o as a,c as r,G as c,F as p,m as s,p as u,g as _,t as n,_ as m,k as h,J as g}from"./chunks/framework.CPfoFgza.js";const f=JSON.parse('[{"title":"使用 Utterances 给 Vitepress 添加评论功能","url":"/posts/前端/使用 Utterances 给 Vitepress 添加评论功能","date":{"time":1711843200000,"string":"2024-03-31"},"abstract":"本文简单介绍了 Utterances 并说明如何在 Vitepress 中集成 Utterances。"},{"title":"2023 的一些思考","url":"/posts/年终总结/2023 的一些思考","date":{"time":1707782400000,"string":"2024-02-13"},"abstract":"我每年都会写一篇年终总结。但是今年做的项目大多不便于展示，只好写一些我最近的思考作为去年的收获总结。"},{"title":"Tailwind CSS 很好，但不适合我","url":"/posts/前端/Tailwind CSS 很好，但不适合我","date":{"time":1696204800000,"string":"2023-10-02"},"abstract":"在一个月前，我选择了 Tailwind CSS 用于一个企业官网的开发。一个月后，项目经过了几次小版本迭代，我对 Tailwind CSS 的使用小有心得。本文将阐述我在企业开发中使用 Tailwind CSS 后对它的看法。"},{"title":"Vue3 hooks 实践后的个人偏见","url":"/posts/前端/Vue3 hooks 实践后的个人偏见","date":{"time":1681603200000,"string":"2023-04-16"},"abstract":"许多关于 hooks 的文章都着重介绍了 hooks 的理念，而举得案例过于简单，刚接触 hooks 的新手难以将其运用至业务代码中。本文将着重介绍 hooks 在一个难度适中的示例中是如何使用的。对于理念部分，我认为官方文档已经足够详细，本人仅穿插一点个人偏见。强烈建议阅读本文前，先学习官方文档组合式函数这一章节。"},{"title":"node.js 实现压缩文件","url":"/posts/前端/node.js 实现压缩","date":{"time":1681603200000,"string":"2023-04-16"},"abstract":"开发钉钉 H5 微应用中，不同于平常的 build，前端需要把文件打成压缩包上传至平台。同样的机制在另外一些阿里系产品也类似，例如浙里办、浙政钉。相较于一键执行脚本，手动压缩文件容易出错。我通过 node-archiver 这个包简单地实现了压缩，并在此向大家介绍。"},{"title":"Vue3在浙里办的实践","url":"/posts/前端/Vue3在浙里办的实践","date":{"time":1670716800000,"string":"2022-12-11"},"abstract":"本文将从以下几方面展开：浙里办 H5 开发前需知、项目构建与技术选型、浙里办对接过程中遇到的问题及解决方案、项目一些需求的实现思路。"},{"title":"跨域通信之postMessage","url":"/posts/前端/跨域通信之postmessage","date":{"time":1666137600000,"string":"2022-10-19"},"abstract":"postMessage 是什么？通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为 https），端口号，以及主机 (两个页面的模数 Document.domain设置为相同的值) 时，这两个脚本才能相互通信。window.postMessage() 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。"},{"title":"前端已经接好接口还要写假数据，如何优雅处理？","url":"/posts/前端/前端已经接好接口还要写假数据，如何优雅处理？","date":{"time":1659139200000,"string":"2022-07-30"},"abstract":"去年年底给公司做了一个大屏项目，接好接口上线也已经半年多了。然而因为某些因素，导致时不时需要前端在接口获得的数据基础通过假数据“润色”，很是麻烦。本文是我在这过程中思考的一点总结。"},{"title":"不断学习 | 2022年中总结","url":"/posts/年终总结/不断学习2022年中总结","date":{"time":1657411200000,"string":"2022-07-10"},"abstract":"工作节奏整体平稳。自己搭建了项目环境并投入生产环境使用；维护了一些老项目，修复了久远的隐藏 BUG (让屎山好了那么一丢丢)；归功于 Eslint 与阅读了更多代码，代码风格有了显著提升；做了很多关于文件上传下载的内容，对于 HTTP 协议有了更深入的了解。"},{"title":"长列表无限下拉的实现（下）","url":"/posts/前端/长列表无限下拉的实现（下）","date":{"time":1655078400000,"string":"2022-06-13"},"abstract":"还没看过上篇的小伙伴，可以先阅读《长列表无限下拉的实现（上）》。我本想沿着上篇的思路，继续使用 padding 来实现，但是我实现后感觉并不流畅，于是参考了 transform 的实现方式。"}]'),b={class:"post-header"},S={class:"post-title"},k=["href"],v=["innerHTML"],T={class:"post-info"},V=l({__name:"DetailedPostCard",props:{posts:{type:Array,required:!0}},setup(i){return(o,e)=>(a(!0),r(p,null,c(i.posts,(t,d)=>(a(),r("div",{key:d,class:"post-list"},[s("div",b,[s("div",S,[s("a",{href:u(_)(t.url)},n(t.title),9,k)])]),s("p",{class:"abstract",innerHTML:t.abstract},null,8,v),s("div",T,n(t.date),1)]))),128))}}),w=m(V,[["__scopeId","data-v-8aa5c7e1"]]),U=JSON.parse('{"title":"首页-无声2017的博客","description":"","frontmatter":{"layout":"doc","title":"首页-无声2017的博客","aside":false,"lastUpdated":false},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1711959666000}'),C={name:"index.md"},P=Object.assign(C,{setup(i){const o=h(()=>f.map(e=>({...e,date:e.date.string})));return(e,t)=>(a(),r("div",null,[g(w,{posts:o.value},null,8,["posts"])]))}});export{U as __pageData,P as default};
