import{_ as i,o as a,c as t,a2 as n}from"./chunks/framework.D-6dkPHk.js";const E=JSON.parse('{"title":"长列表无限下拉的实现（下）","description":"","frontmatter":{"title":"长列表无限下拉的实现（下）","date":"2022-06-13T00:00:00.000Z","abstract":"还没看过上篇的小伙伴，可以先阅读《长列表无限下拉的实现（上）》。我本想沿着上篇的思路，继续使用 padding 来实现，但是我实现后感觉并不流畅，于是参考了 transform 的实现方式。","tags":["Vue.js"]},"headers":[],"relativePath":"posts/前端/长列表无限下拉的实现（下）.md","filePath":"posts/前端/长列表无限下拉的实现（下）.md","lastUpdated":1732591455000}'),e={name:"posts/前端/长列表无限下拉的实现（下）.md"};function l(h,s,p,r,k,d){return a(),t("div",null,s[0]||(s[0]=[n(`<h1 id="长列表无限下拉的实现-下" tabindex="-1">长列表无限下拉的实现（下） <a class="header-anchor" href="#长列表无限下拉的实现-下" aria-label="Permalink to &quot;长列表无限下拉的实现（下）&quot;">​</a></h1><p>还没看过上篇的小伙伴，可以先阅读<a href="https://juejin.cn/post/7106145431893065736" target="_blank" rel="noreferrer">《长列表无限下拉的实现（上）》</a>。我本想沿着上篇的思路，继续使用<code>padding</code>来实现，但是我实现后感觉并不流畅，于是参考了<code>transform</code>的实现方式。</p><h2 id="不定高元素虚拟列表的实现" tabindex="-1">不定高元素虚拟列表的实现 <a class="header-anchor" href="#不定高元素虚拟列表的实现" aria-label="Permalink to &quot;不定高元素虚拟列表的实现&quot;">​</a></h2><h3 id="整体思路" tabindex="-1">整体思路 <a class="header-anchor" href="#整体思路" aria-label="Permalink to &quot;整体思路&quot;">​</a></h3><p>在上篇中实现定高虚拟列表是通过直接传入了一个值作为列表项的高度，这种方案仅适用于知道行高的情况，而在不定高列表中渲染前并不知道列表项的高度。有的小伙伴可能会想到将列表项<strong>渲染到屏幕外</strong>，对其高度进行测量并缓存，然后再将其渲染至可视区域内。这将导致渲染成本增加一倍，所以此方案并不可行。通过<strong>预估高度</strong>先行渲染再获取真实高度并缓存的方案，规避了前两种方案的缺陷。完成后的虚拟列表的效果如下图所示：</p><p><img src="https://raw.githubusercontent.com/ivestszheng/images-store/master/img/transform%E4%B8%8D%E5%AE%9A%E9%AB%98%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8.gif" alt="transform不定高虚拟列表" loading="lazy"></p><p>此外，手淘的一个方案是通过<code>intersectionObserver</code>观察元素是否进入视口，这里不展开，具体请看<a href="https://blog.csdn.net/Taobaojishu/article/details/121173387" target="_blank" rel="noreferrer">《无限滚动加载解决方案之虚拟滚动（下）》</a>。</p><h3 id="列表项动态高度" tabindex="-1">列表项动态高度 <a class="header-anchor" href="#列表项动态高度" aria-label="Permalink to &quot;列表项动态高度&quot;">​</a></h3><p>先来看看组件化后基础使用方式：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">VirtualList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">estimatedItemSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">slotProps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    // Item 是抽离出的业务组件，slotProps.item 是通过作用域插槽拿到的私有变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;Item :item=&quot;slotProps.item&quot; /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">VirtualList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个组件共接受 4 个参数：</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>listData</td><td>Array</td><td>传入的列表数据</td></tr><tr><td>estimatedItemSize</td><td>Number</td><td>预估高度，单位为<code>px</code></td></tr><tr><td>bufferScale</td><td>Number</td><td>缓冲区屏数，默认为<code>1</code></td></tr><tr><td>height</td><td>String</td><td>容器高度，默认<code>100%</code></td></tr></tbody></table><p>在<code>created</code>钩子，组件调用初始化方法<code>initPositions</code>，具体代码如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    initPositions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.positions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.listData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        index,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.estimatedItemSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        top: index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.estimatedItemSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        bottom: (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.estimatedItemSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这里定义了 <code>positions</code>，用于列表项渲染后存储 <code>每一项的高度以及位置</code>信息。由于列表项高度不定，并且我们维护了 <code>positions</code>，用于记录每一项的位置，而 <code>列表高度</code>实际就等于列表中最后一项的底部距离列表顶部的位置，即<code>this.positions[this.positions.length - 1].bottom</code>。<code>渲染完成</code>后，获取每项的位置信息并缓存，所以使用钩子函数<code>updated</code>来实现。</p><p>滚动后获取列表<code>开始索引</code>的方法修改为通过<code>缓存</code>获取：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStartIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scrollTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.positions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i.bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scrollTop);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>由于<code>bottom</code>在<code>positions</code>每一项中是递增的，此处可用<code>二分查找</code>优化。至此，列表项动态高度已经实现，其它的一些优化点与上篇中提到的内容相差无几。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>我本想再深入一些，但参考中的两篇文章无论代码还是描述都已十分详细，而我也没有另外的技术方案，因此下篇仅作为上篇的补充罢。</p><h2 id="demo-地址" tabindex="-1">Demo 地址 <a class="header-anchor" href="#demo-地址" aria-label="Permalink to &quot;Demo 地址&quot;">​</a></h2><p><a href="https://github.com/ivestszheng/virtual-scroll-demo" target="_blank" rel="noreferrer">ivestszheng/virtual-scroll-demo</a>。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ol><li><a href="https://cloud.tencent.com/developer/article/1533206" target="_blank" rel="noreferrer">云+社区 -「前端进阶」高性能渲染十万条数据(虚拟列表)</a></li><li><a href="https://blog.csdn.net/Taobaojishu/article/details/121173387" target="_blank" rel="noreferrer">csdn - 无限滚动加载解决方案之虚拟滚动（下）</a></li></ol>`,24)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
